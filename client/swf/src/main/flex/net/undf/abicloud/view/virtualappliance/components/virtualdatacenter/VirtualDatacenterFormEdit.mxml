<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<AbiCloudPopUp 
    xmlns="net.undf.abicloud.view.general.*"
    creationComplete="onCreationComplete()"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    titleText="@Resource(bundle='VirtualAppliance', key='POPUP_TITLE_VIRTUALDATACENTER_EDIT')">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.user.PrivilegeType;
        	import net.undf.abicloud.utils.SecuredPrivilegeAccess;
            import mx.binding.utils.ChangeWatcher;
            import mx.utils.ObjectUtil;

            import net.undf.abicloud.events.InfrastructureEvent;
            import net.undf.abicloud.events.VirtualApplianceEvent;
            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.vo.infrastructure.DataCenter;
            import net.undf.abicloud.vo.infrastructure.HyperVisorType;
            import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;

            //The VirtualDataCenter that will be created or edited
            private var _virtualDataCenter:VirtualDataCenter;

            //Hashmap containing the Hypervisor types by Datacenter
            private var _hypervisorTypesByDatacenter:Object;

            private function onCreationComplete():void
            {
                //Check privilege
                SecuredPrivilegeAccess.checkElementAccess(PrivilegeType.VDC_MANAGE,"removeChild",acceptButton,buttonAction);
                
                //Listening for when the Datacenter list is available
                ChangeWatcher.watch(physicalDataCenterInput, "dataProvider", setPhysicalDataCenterFieldOnEditing);
            }

            /**
             * Initializes this component to create a new Virtual Datacenter, or edit an existing VirtualDatacenter
             */
            public function init(virtualDataCenter:VirtualDataCenter = null):void
            {
                this._virtualDataCenter = virtualDataCenter;

                //Recover all the datacenters
                var lsDatacenters:InfrastructureEvent = new InfrastructureEvent(InfrastructureEvent.GET_DATACENTERS);
                dispatchEvent(lsDatacenters);

                this._hypervisorTypesByDatacenter = new Object();

                //Setting fields
                nameInput.text = this._virtualDataCenter.name;

                validateForm();
                nameInput.setFocus();
            }

            /**
             * We cannot set the right value for physicalDataCenterInput when this component is shown,
             * because we have to wait for the Datacenter list to come from server
             */
            private function setPhysicalDataCenterFieldOnEditing(event:Event = null):void
            {
                physicalDataCenterInput.selectedIndex = -1;

                var length:int = physicalDataCenterInput.dataProvider.length;
                var i:int;

                for (i = 0; i < length; i++)
                {
                    if (DataCenter(physicalDataCenterInput.dataProvider[i]).id == this._virtualDataCenter.idDataCenter)
                    {
                        physicalDataCenterInput.selectedIndex = i;
                        onPhysicalDatacenterInputChange();
                        break;
                    }
                }
            }

            private function setHyperTypeFieldOnEditing(event:Event = null):void
            {
                hyperTypeInput.selectedIndex = -1;

                //Hypervisortype list is retrieved upon application start
                var length:int = hyperTypeInput.dataProvider.length;
                var i:int;

                for (i = 0; i < length; i++)
                {
                    if (HyperVisorType(hyperTypeInput.dataProvider[i]).id == this._virtualDataCenter.hyperType.id)
                    {
                        hyperTypeInput.selectedIndex = i;
                        validateForm();
                        break;
                    }
                }
            }

            /**
             * Everytime user selects a Datacenter, we need to set the appropiate list of Hypervisor types
             */
            private function onPhysicalDatacenterInputChange():void
            {
                if (this._hypervisorTypesByDatacenter.hasOwnProperty(DataCenter(physicalDataCenterInput.selectedItem).id))
                {
                    hyperTypeInput.dataProvider = this._hypervisorTypesByDatacenter[DataCenter(physicalDataCenterInput.selectedItem).id];
                    validateForm();
                }
                else
                {
                    //We still do not have the Hypervisor types for this Datacenter
                    AbiCloudModel.getInstance().infrastructureManager.addEventListener(InfrastructureEvent.HYPERVISOR_TYPES_BY_DATACENTER_RETRIEVED,
                                                                                       onHypervisorTypesRetrieved);
                    var infrastructureEvent:InfrastructureEvent = new InfrastructureEvent(InfrastructureEvent.GET_HYPERVISOR_TYPES_BY_DATACENTER);
                    infrastructureEvent.dataCenter = physicalDataCenterInput.selectedItem as DataCenter;
                    dispatchEvent(infrastructureEvent);
                }
            }

            private function onHypervisorTypesRetrieved(infrastructureEvent:InfrastructureEvent):void
            {
                AbiCloudModel.getInstance().infrastructureManager.removeEventListener(InfrastructureEvent.HYPERVISOR_TYPES_BY_DATACENTER_RETRIEVED,
                                                                                      onHypervisorTypesRetrieved);

                hyperTypeInput.dataProvider = infrastructureEvent.hypervisorTypesByDatacenter;
                validateForm();

                //We save a cache of hypervisor types
                this._hypervisorTypesByDatacenter[DataCenter(physicalDataCenterInput.selectedItem).id] = infrastructureEvent.hypervisorTypesByDatacenter;

                //Set the appropiate value
                setHyperTypeFieldOnEditing();

            }

            private function onAccept():void
            {
                //Editing the VirtualDataCenter, without modifying the original one until changes are saved in server
                var virtualDataCenterCopy:VirtualDataCenter = ObjectUtil.copy(this._virtualDataCenter) as VirtualDataCenter;
                virtualDataCenterCopy.name = nameInput.text;
                virtualDataCenterCopy.idDataCenter = (physicalDataCenterInput.selectedItem as DataCenter).id;
                virtualDataCenterCopy.hyperType = hyperTypeInput.selectedItem as HyperVisorType;

                var virtualApplianceEvent:VirtualApplianceEvent;
                virtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.EDIT_VIRTUAL_DATACENTER);
                virtualApplianceEvent.virtualDataCenter = virtualDataCenterCopy;
                dispatchEvent(virtualApplianceEvent);

                closeForm();
            }

            private function closeForm():void
            {
                dispatchEvent(new Event("VirtualDatacenterFormEditClose"));
            }

            /**
             * Validation method
             * It doesn't enables acceptButton if the virtualDataCenter name and physicalDataCenter
             * is not selected
             */
            private function validateForm():void
            {
                if (nameInput.text.length > 0 && physicalDataCenterInput.selectedIndex > -1 && hyperTypeInput.selectedIndex > -1)
                    acceptButton.enabled = true;
                else
                    acceptButton.enabled = false;
            }

            /**
             * Basic behaivour is as follows:
             * If user presses the Enter, in any part of this Pop Up (except buttons), it would be
             * like Accept Button has been pressed
             */
            override protected function keyboardHandler(keyboardEvent:KeyboardEvent):void
            {
                if (keyboardEvent.target == acceptButton || keyboardEvent.target == cancelButton)
                    super.keyboardHandler(keyboardEvent);
                else
                {
                    if (keyboardEvent.keyCode == 13 && acceptButton.enabled && SecuredPrivilegeAccess.userHasPrivilege(PrivilegeType.VDC_MANAGE))
                        onAccept();
                }
            }

            private function hypervisorTypeInputLabelFunction(item:Object):String
            {
                if (item && item is HyperVisorType)
                    return HyperVisorType.HYPERVISOR_NAMES[HyperVisorType(item).id];
                else
                    return "-";
            }
        ]]>
    </mx:Script>

    <mx:Form paddingTop="3">
        <mx:FormItem 
            label="@Resource(bundle='Common', key='TEXTINPUT_LABEL_NAME')"
            required="true">
            <mx:TextInput id="nameInput"
                height="20"
                maxChars="39"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='VirtualAppliance', key='LABEL_SELECTDATACENTER')"
            required="true">
            <mx:ComboBox id="physicalDataCenterInput"
                height="18"
                enabled="false" labelField="name"
                dataProvider="{AbiCloudModel.getInstance().infrastructureManager.dataCenters}"
                change="onPhysicalDatacenterInputChange()"
                prompt="@Resource(bundle='VirtualAppliance', key='COMBOBOX_PROMPT_PHYSICALDATACENTER')"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='VirtualAppliance', key='LABEL_SELECTHYPERTYPE')"
            required="true">
            <mx:ComboBox id="hyperTypeInput"
                height="18"
                enabled="false" labelFunction="hypervisorTypeInputLabelFunction"
                change="validateForm()"
                prompt="@Resource(bundle='VirtualAppliance', key='COMBOBOX_PROMPT_HYPERTYPE')"/>
        </mx:FormItem>

        <!-- BUTTONS -->
        <mx:FormItem direction="horizontal" id="buttonAction">
            <mx:Button id="acceptButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_ACCEPT')"
                click="onAccept()"/>

            <mx:Button id="cancelButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_CANCEL')"
                styleName="AlternativeButton"
                click="closeForm()"/>
        </mx:FormItem>
    </mx:Form>
</AbiCloudPopUp>

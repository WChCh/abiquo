<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<NodeConnectionSurface 
    xmlns="net.undf.abicloud.view.virtualappliance.components.node.connection.*"
    width="100%" height="100%"
    backgroundAlpha="0"
    borderSkin="net.undf.abicloud.view.virtualappliance.components.node.NodeDrawingViewBackground"
    verticalScrollPolicy="off" horizontalScrollPolicy="off"
    styleName="DrawingArea"
    initialize="onInitialize()"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    implements="net.undf.abicloud.view.virtualappliance.components.node.INodeView">

    <mx:Script>
        <![CDATA[
            import flash.sampler.stopSampling;
            import net.undf.abicloud.view.virtualappliance.components.node.NodeRendererEvent;
            import net.undf.abicloud.view.virtualappliance.components.node.NodeRenderer;
            import mx.utils.ObjectUtil;
            import mx.events.ItemClickEvent;
            import net.undf.abicloud.vo.virtualappliance.Node;
            import net.undf.abicloud.vo.virtualimage.VirtualImage;
            import mx.managers.DragManager;
            import mx.events.DragEvent;
            import mx.collections.ArrayCollection;


            private var _halfX:int;

            private var _halfY:int;

            private var _nodeDrawTimer:Timer;

            //Flag that indicates if this component is called to display Nodes
            //When false, this component will take any action against NodeRendererEvents
            private var _isDisplayingNodes:Boolean = false;

            //The INodeViewController that contains and controls this INodeView
            private var _iNodeViewController:INodeViewController = null;

            private function onInitialize():void
            {
                //This timer is used to give time to Nodes to be drawn, before we draw connections
                this._nodeDrawTimer = new Timer(10, 1);
                this._nodeDrawTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onNodeDrawTimerComplete);
            }

            /////////////////////////////////////////////////
            //DRAWING FUNCTIONALITY & INodeView implementation

            public function set nodeViewController(inodeViewController:INodeViewController):void
            {
                if (this._iNodeViewController != null)
                {
                    //Unregistering events from the old INodeViewController
                    EventDispatcher(this._iNodeViewController).removeEventListener(NodeRendererEvent.NODERENDERER_ERASED,
                                                                                   onNodeRendererErased);
                    EventDispatcher(this._iNodeViewController).removeEventListener(NodeRendererEvent.NODERENDERER_ADDED,
                                                                                   onNodeRendererAdded);
                }

                this._iNodeViewController = inodeViewController;

                //Registering events
                EventDispatcher(this._iNodeViewController).addEventListener(NodeRendererEvent.NODERENDERER_ERASED,
                                                                            onNodeRendererErased);
                EventDispatcher(this._iNodeViewController).addEventListener(NodeRendererEvent.NODERENDERER_ADDED,
                                                                            onNodeRendererAdded);
            }

            public function get isDisplayingNodes():Boolean
            {
                return this._isDisplayingNodes;
            }

            public function set isDisplayingNodes(value:Boolean):void
            {
                this._isDisplayingNodes = value;
            }

            public function fromINodeViewToNode(point:Point):Point
            {
                point.x = (point.x - this._halfX);
                point.y = (point.y - this._halfY);

                return point;
            }

            public function fromNodeToINodeView(point:Point):Point
            {
                point.x = point.x + this._halfX;
                point.y = point.y + this._halfY;

                return point;
            }

            /**
             * Removes all Nodes that this component may be drawing
             */
            public function cleanNodes():void
            {
                super.cleanAll();
                removeAllChildren();
            }

            public function drawNodes(nodes:ArrayCollection, nodeConnections:XML):void
            {
                this._nodeConnections = nodeConnections;

                //Acquiring DrawingArea size for proper coordenates conversion, every time we draw nodes
                //If we still do not have a width or height, we take them from our parent
                this._halfX = (width > 0) ? width / 2 : parent.width / 2;
                this._halfY = (height > 0) ? height / 2 : parent.height / 2;

                var length:int = nodes.length;
                var i:int;
                for (i = 0; i < length; i++)
                {
                    //We do not draw erased nodes
                    if (NodeRenderer(nodes.getItemAt(i)).node.modified != Node.NODE_ERASED)
                        drawNode(nodes.getItemAt(i) as NodeRenderer);
                }

                //We give 10ms to Nodes to be drawn, before we draw the connections
                this._nodeDrawTimer.start();
            }

            private function onNodeDrawTimerComplete(timerevent:TimerEvent):void
            {
                super.buildNodeConnections();
            }

            /**
             * Draws a Node Renderer in the Drawing Area
             **/
            private function drawNode(nodeRenderer:NodeRenderer):void
            {
                //Setting the point where the NodeRender will be drawn in the DrawingArea
                var point:Point = new Point(nodeRenderer.node.posX, nodeRenderer.node.posY);
                point = fromNodeToINodeView(point);
                nodeRenderer.x = point.x;
                nodeRenderer.y = point.y;

                //Quickfix
                nodeRenderer.setStyle("backgroundAlpha", 1);

                //Adding the new NodeRenderer to the Drawing Area
                this.addChild(nodeRenderer);

                //Since NodeDrawingView is inside a NodeConnectionSurface, NodeRenderers must
                //register their connectors
                nodeRenderer.registerConnector();
            }

            /**
             * Captures whenever user has added a new NodeRenderer
             */
            private function onNodeRendererAdded(event:NodeRendererEvent):void
            {
                if (this._isDisplayingNodes)
                    drawNode(event.nodeRenderer as NodeRenderer);
            }


            /**
             * Captues whenever user wants to erase a NodeRenderer
             **/
            private function onNodeRendererErased(event:NodeRendererEvent):void
            {
                if (this._isDisplayingNodes)
                    eraseNodeRenderer(event.nodeRenderer as NodeRenderer);
            }


            /**
             * Erases the given Node from the DrawingArea, marking it as erased
             **/
            private function eraseNodeRenderer(nodeRenderer:NodeRenderer):void
            {
                //Deleting the NodeRenderer from the DrawingArea
                removeChild(nodeRenderer);
            }
        ]]>
    </mx:Script>
</NodeConnectionSurface>

<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<AbiCloudPopUp 
    xmlns="net.undf.abicloud.view.general.*"
    initialize="onInitialize()"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    titleText="@Resource(bundle='VirtualImage', key='POPUP_TITLE_SELECT_VIRTUAL_MACHINE')">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.events.virtualimage.VirtualImageEvent;
        	import mx.collections.Sort;
        	import mx.collections.SortField;
        	import net.undf.abicloud.model.AbiCloudModel;
            import mx.binding.utils.ChangeWatcher;
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.events.CloseEvent;
            import mx.resources.ResourceBundle;
            import mx.resources.ResourceManager;

            import net.undf.abicloud.view.general.AbiCloudAlert;
            import net.undf.abicloud.vo.infrastructure.State;
            import net.undf.abicloud.vo.virtualappliance.Node;
            import net.undf.abicloud.vo.virtualappliance.NodeVirtualImage;
            import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;
            import net.undf.abicloud.vo.virtualimage.VirtualImage;

            [Bindable]
            private var _virtualImageList:ArrayCollection;
            
            private var _virtualImage:VirtualImage;
            
            private var _sortField:SortField;
            
            private var _sort:Sort;
            
            
            [Bindable]
            public var listOfVirtualImages:ArrayCollection;

           
            /**
             * When this component initializes for the first time
             */
            private function onInitialize():void
            {
               _sortField = new SortField();
               _sortField.name = "master";
               
               _sort = new Sort();
               _sort.fields = [_sortField];
               _sort.reverse();
               
               //List of Virtual Images which will be added
               listOfVirtualImages = new ArrayCollection();
               
               
               
            }
            
            private function onVirtualImageSelectedUnselected(event:VirtualImageEvent):void{
            	if(event.type == VirtualImageEvent.VIRTUAL_IMAGE_CHECKED){
            		if(isNotAlreadyChecked(event.virtualImage)){
	            		listOfVirtualImages.addItem(event.virtualImage);
            		}
            	}else{
            		listOfVirtualImages.removeItemAt(listOfVirtualImages.getItemIndex(event.virtualImage));
            	}
            }

			//check if the virtual image is already checked, to avoid a refresh bug
			private function isNotAlreadyChecked(virtualimage:VirtualImage):Boolean{
				for(var i:int = 0 ; i < listOfVirtualImages.length ; i++){
					if(VirtualImage(listOfVirtualImages.getItemAt(i)).id == virtualimage.id){
						return false;
					}
				}
				return true;
			}
           

            /**
             * Initializes this component with a VirtualAppliance
             * Creates the DataProvider using the Virtual Appliance nodes, to be used
             * by user to select which nodes wants to convert to stateful
             */
            public function init(virtualImage:VirtualImage):void
            {
                this._virtualImage = virtualImage;
                listOfVirtualImages = new ArrayCollection();
                _virtualImageList = AbiCloudModel.getInstance().virtualImageManager.virtualImageList;
                _virtualImageList.filterFunction = filterVirtualImage;
                _virtualImageList.sort = this._sort;
                _virtualImageList.refresh();
                
                addEventListener(VirtualImageEvent.VIRTUAL_IMAGE_CHECKED,onVirtualImageSelectedUnselected);
               addEventListener(VirtualImageEvent.VIRTUAL_IMAGE_UNCHECKED,onVirtualImageSelectedUnselected);
            }
            
            private function onClose():void{
            	dispatchEvent(new Event("popupClose"));
            }
            
            private function filterVirtualImage(virtualImage:VirtualImage):Boolean{
            	if(virtualImage.master == null && virtualImage.id == this._virtualImage.id){
            		return true;
            	}
            	if(virtualImage.master != null){
            		if(virtualImage.master.id == this._virtualImage.id){
            			return true;
            		}
            	}
            	return false;
            }
            
            private function addVirtualImage():void{
            	dispatchEvent(new Event("virtualImagesAdded"));
            }

            
        ]]>
    </mx:Script>

    <mx:HBox 
        width="100%"
        horizontalGap="0"
        paddingBottom="0"
        paddingLeft="0"
        paddingRight="0"
        paddingTop="0">
        <mx:Spacer width="100%"/>

    </mx:HBox>

    <mx:Canvas 
        width="350" height="400">
        <mx:List id="nodeList"
            width="100%" height="100%"
            dataProvider="{_virtualImageList}"
            itemRenderer="net.undf.abicloud.view.virtualimage.components.virtualimage.VirtualImageListRenderer"
            styleName="ListFull" selectable="false"/>
    </mx:Canvas>


    <!-- Close and Bundle button -->
    <mx:HBox 
        width="100%"
        horizontalAlign="center"
        paddingBottom="10"
        paddingTop="15">

        <mx:Button id="statefulButton"
            height="18"
            label="@Resource(bundle='Common', key='BUTTON_ADD')"
            click="addVirtualImage()"
            enabled="{listOfVirtualImages.length != 0}"/>

        <mx:Button id="closeButton"
            height="18"
            label="@Resource(bundle='Common', key='BUTTON_CLOSE')"
            styleName="AlternativeButton"
            click="onClose()"/>

    </mx:HBox>
</AbiCloudPopUp>

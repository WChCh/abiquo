<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:VBox 
    width="100%" height="25"
    styleName="InfrastructurePhysicalMachineList" verticalScrollPolicy="off"
    horizontalScrollPolicy="off"
    xmlns:mx="http://www.adobe.com/2006/mxml">

    <mx:Script>
        <![CDATA[
        	import mx.controls.Image;
        	import net.undf.abicloud.view.main.CommonAssets;
            import mx.core.UIComponent;
            import mx.core.Application;
            import mx.managers.DragManager;
            import mx.core.DragSource;
            import mx.core.IFlexDisplayObject;
            import net.undf.abicloud.utils.customtree.CustomTreeNode;
            import mx.resources.ResourceManager;
            import mx.resources.ResourceBundle;
            import mx.collections.ArrayCollection;

            [ResourceBundle("Infrastructure")]
            private var rb:ResourceBundle;

            private var title:String = ResourceManager.getInstance().getString("Infrastructure",
                                                                               "LABEL_PHYSICALMACHINE_UNASSIGNED");

            [Bindable]
            private var _physicalMachines:ArrayCollection = new ArrayCollection();

            /**
             * ArrayCollection containing a list of Physical Machines not assigned to any Rack
             */
            public function set physicalMachines(value:ArrayCollection):void
            {
                this._physicalMachines = value;
                mainLabel.text = title + " (" + this._physicalMachines.length + ")";
            }

//            [Embed("/assets/infrastructure/physicalMachine_small.pn g")]
//            private var pmIcon:Class;

            private function iconFunction(item:Object):Class
            {
                return CommonAssets.physicalMachineSmallIcon as Class;
            }

            private function onClickOpenButton():void
            {
                if (openButton.selected)
                    openList();
                else
                    closeList();
            }

            private function openList():void
            {
                physicalMachinesList.includeInLayout = true;
                physicalMachinesList.visible = true;

                this.height = 150;
            }

            public function closeList():void
            {
                openButton.selected = false;

                physicalMachinesList.includeInLayout = false;
                physicalMachinesList.visible = false;

                this.height = 25;
            }

            //////////////////////////////////////////
            // DRAG & DROP FUNCTIONALITY

            /**
             * Register Mouse Move events, to know if user wants to start a drag operaion
             */
            private function onMouseDownPMList():void
            {
                if (physicalMachinesList.selectedIndex > -1)
                    physicalMachinesList.addEventListener(MouseEvent.MOUSE_MOVE,
                                                          onMouseMove);
            }

            /**
             * Initializes a Drag operation
             */
            private function onMouseMove(mouseEvent:MouseEvent):void
            {
                //We don't need this handlers until user wants to initate another Drag operation
                physicalMachinesList.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);

                //To be able to interact with a CustomTree in a Drag Drop operation, we have to encapsulate the data
                //in a CustomTreeNode
                var customTreeNode:CustomTreeNode = new CustomTreeNode(physicalMachinesList.selectedItem);

                var dragSource:DragSource = new DragSource();
                dragSource.addData(customTreeNode, "CustomTreeNode");

//                var dragProxy:IFlexDisplayObject = new pmIcon();
//                var dragProxy:IFlexDisplayObject = new pmIcon();

                var dragProxy:Image = new Image();
                dragProxy.source = CommonAssets.physicalMachineSmallIcon;

                DragManager.doDrag(UIComponent(Application.application), dragSource,
                                   mouseEvent, dragProxy, -mouseEvent.stageX + 20,
                                   -mouseEvent.stageY, 0.9);
            }
        ]]>
    </mx:Script>

    <mx:HBox 
        width="100%"
        paddingLeft="5"
        paddingTop="3"
        verticalAlign="middle">

        <mx:Label id="mainLabel"/>

        <mx:Spacer width="100%"/>

        <mx:Button id="openButton"
            styleName="PMListOpenButton" toggle="true"
            toolTip="@Resource(bundle='Infrastructure', key='TOOLTIP_EXPAND')"
            click="onClickOpenButton()"/>

    </mx:HBox>

    <mx:List id="physicalMachinesList"
        width="100%" height="100%"
        borderStyle="none"
        dataProvider="{this._physicalMachines}" labelField="name"
        includeInLayout="false"
        iconFunction="iconFunction"
        mouseDown="onMouseDownPMList()"
        visible="false"/>

</mx:VBox>

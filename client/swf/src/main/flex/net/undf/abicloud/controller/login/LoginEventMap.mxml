<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<EventMap 
    xmlns="http://mate.asfusion.com/"
    xmlns:mx="http://www.adobe.com/2006/mxml">


    <mx:Script>
        <![CDATA[
            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.controller.ResultHandler;
            import net.undf.abicloud.controller.FaultHandler;
            import net.undf.abicloud.business.Services;
            import com.asfusion.mate.utils.debug.Debugger;
            import net.undf.abicloud.utils.ScreenBlocker;

            import net.undf.abicloud.events.*;

            [Bindable]
            private var services:Services = new Services();
        ]]>
    </mx:Script>


    <!-- LoginEvent.LOGIN ________________________________________________________________________ -->
    <EventHandlers type="{LoginEvent.LOGIN}">

        <!-- Blocking screen -->
        <InlineInvoker method="ScreenBlocker.blockScreen"/>

        <!-- Make call to the server here -->

        <RemoteObjectInvoker instance="{services.loginService}"
            method="login"
            arguments="{[event.login]}">

            <resultHandlers>
                <MethodInvoker generator="{LoginResultHandler}"
                    method="loginHandler"
                    arguments="{[resultObject]}"/>

                <!-- The unblock screen function is called 
                	when the login process failed or when the theme is fully loaded -->
            </resultHandlers>

            <faultHandlers>
                <MethodInvoker generator="{FaultHandler}"
                    method="handleFault"
                    arguments="{[fault]}"/>

                <!-- Unblock screen -->
                <InlineInvoker method="ScreenBlocker.unblockScreen"/>
            </faultHandlers>

        </RemoteObjectInvoker>

    </EventHandlers>


    <!-- LoginEvent.LOGOUT ________________________________________________________________________ -->
    <EventHandlers type="{LoginEvent.LOGOUT}">

        <!-- Blocking screen -->
        <InlineInvoker method="ScreenBlocker.blockScreen"/>

        <!-- Make call to the server here -->

        <RemoteObjectInvoker instance="{services.loginService}"
            method="logout"
            arguments="{[event.logout]}">

            <resultHandlers>
                <MethodInvoker generator="{LoginResultHandler}"
                    method="logoutHandler"
                    arguments="{[resultObject]}"/>

                <!-- Unblock screen -->
                <InlineInvoker method="ScreenBlocker.unblockScreen"/>
            </resultHandlers>

            <faultHandlers>
                <MethodInvoker generator="{FaultHandler}"
                    method="handleFault"
                    arguments="{[fault]}"/>

                <!-- Unblock screen -->
                <InlineInvoker method="ScreenBlocker.unblockScreen"/>
            </faultHandlers>

        </RemoteObjectInvoker>

    </EventHandlers>

</EventMap>

<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:VBox 
    width="100%" height="100%"
    backgroundColor="#FFFFFF"
    borderStyle="solid"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    verticalAlign="top"
    verticalGap="0"
    horizontalScrollPolicy="off"
    creationComplete="onCreationComplete()"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    implements="net.undf.abicloud.view.virtualappliance.components.node.INodeView">

    <!-- Displays a VirtualAppliance's list of nodes, using containers for each type of Nodes
         This component uses an Inversion of Control pattern: NodeTypeView will only create the containers
         but will not add them to the display list. Each Node container will have to listen the NodeRendererEvents that
         this NodeTypeView will dispatch, in order to know when has to display itself, when has to draw a Node, or when has
         to erase a Node
    -->

    <mx:Script>
        <![CDATA[
            import net.undf.abicloud.vo.virtualappliance.Node;
            import mx.binding.utils.BindingUtils;
            import net.undf.abicloud.vo.virtualimage.Category;
            import net.undf.abicloud.model.AbiCloudModel;
            import mx.collections.ArrayCollection;

            private var _halfX:int;

            private var _halfY:int;

            //Flag that indicates if this component is called to display Nodes
            //When false, this component will take any action against NodeRendererEvents
            private var _isDisplayingNodes:Boolean = false;

            //The INodeViewController that contains and controls this INodeView
            private var _iNodeViewController:INodeViewController = null;

            //VirtualImage's Categories that NodeVirtualImageContainer needs to display NodeVirtualImage items
            private var _virtualImageCategories:ArrayCollection;

            //The NodeRenderers that will be displayed
            private var _nodeRenderers:ArrayCollection;

            //The XML document that describes the connections between NodeRenderers
            private var _nodeConnections:XML;

            private function onCreationComplete():void
            {
                //Creating containers for NodeNetwork and NodeStorage
                //We cannot create the container for NodeVirtualImage until the list with
                //the VirtualImage Categories is available
                createNodeStorageContainer();
                createNodeNetworkContainer();
            }


            public function set virtualImageCategories(value:ArrayCollection):void
            {
                this._virtualImageCategories = value;

                //We can now create containers for NodeVirtualImage
                createNodeVirtualImageContainer();

                //If we can show the NodeRenderers, we do it
                showNodeRenderers();
            }

            /**
             * Creates a NodeVirtualImageContainer for each VirtualImage Category
             */
            private function createNodeVirtualImageContainer():void
            {
                //If other NodeVirtualImageContainer exists, we destroy them
                dispatchEvent(new Event("deleteAllNodeVirtualImageContainer"));

                //We need a NodeTypeView_virtualImage for each virtual image category
                var length:int = this._virtualImageCategories.length
                var i:int;
                var nodeVirtualImageContainer:NodeVirtualImageContainer;
                for (i = 0; i < length; i++)
                {
                    nodeVirtualImageContainer = new NodeVirtualImageContainer();
                    nodeVirtualImageContainer.width = width;
                    nodeVirtualImageContainer.virtualImageCategory = this._virtualImageCategories.getItemAt(i) as Category;
                    nodeVirtualImageContainer.nodeTypeView = this;
                }
            }

            /**
             * Creates a NodeStorageContainer
             */
            private function createNodeStorageContainer():void
            {

            }

            /**
             * Creates a NodeNetworkContainer
             */
            private function createNodeNetworkContainer():void
            {

            }

            /////////////////////////////////////////////////
            //DRAWING FUNCTIONALITY & INodeView implementation

            public function set nodeViewController(inodeViewController:INodeViewController):void
            {
                if (this._iNodeViewController != null)
                {
                    //Unregistering events from the old INodeViewController
                    EventDispatcher(this._iNodeViewController).removeEventListener(NodeRendererEvent.NODERENDERER_ERASED,
                                                                                   onNodeRendererErased);
                    EventDispatcher(this._iNodeViewController).removeEventListener(NodeRendererEvent.NODERENDERER_ADDED,
                                                                                   onNodeRendererAdded);
                }

                this._iNodeViewController = inodeViewController;

                //Registering events
                EventDispatcher(this._iNodeViewController).addEventListener(NodeRendererEvent.NODERENDERER_ERASED,
                                                                            onNodeRendererErased);
                EventDispatcher(this._iNodeViewController).addEventListener(NodeRendererEvent.NODERENDERER_ADDED,
                                                                            onNodeRendererAdded);
            }

            public function get isDisplayingNodes():Boolean
            {
                return this._isDisplayingNodes;
            }

            public function set isDisplayingNodes(value:Boolean):void
            {
                this._isDisplayingNodes = value;
            }

            public function fromINodeViewToNode(point:Point):Point
            {
                //Since NodeRenderers can not be moved here, NodeTypeView will always return (0,0)
                //return new Point(0, 0);

                point.x = (point.x - this._halfX);
                point.y = (point.y - this._halfY);

                return point;
            }

            public function fromNodeToINodeView(point:Point):Point
            {
                //Since NodeRenderers can not be moved here, NodeTypeView will always return (0,0)
                //return new Point(0, 0);

                point.x = point.x + this._halfX;
                point.y = point.y + this._halfY;

                return point;
            }


            /**
             * Removes all Nodes that this component may be drawing
             */
            public function cleanNodes():void
            {
                var event:Event = new Event("cleanNodes", false);
                dispatchEvent(event);
            }

            public function drawNodes(nodeRenderers:ArrayCollection, nodeConnections:XML):void
            {
                this._nodeRenderers = nodeRenderers;
                this._nodeConnections = nodeConnections;

                //Acquiring DrawingArea size for proper coordenates conversion, every time we draw nodes
                //If we still do not have a width or height, we take them from our parent
                this._halfX = (width > 0) ? width / 2 : parent.width / 2;
                this._halfY = (height > 0) ? height / 2 : parent.height / 2;

                showNodeRenderers();

            }

            /**
             * Shows the NodeRenderers if we are allowed to do so, and if everthing is ready to show them
             */
            private function showNodeRenderers():void
            {
                if (this._isDisplayingNodes && this._nodeRenderers && this._nodeRenderers.length > 0 && this._virtualImageCategories && this._virtualImageCategories.length > 0)
                {
                    var length:int = this._nodeRenderers.length;
                    var i:int;
                    for (i = 0; i < length; i++)
                    {
                        //We do not draw erased nodes
                        //if (NodeRenderer(this._nodeRenderers.getItemAt(i)).node.modified != Node.NODE_ERASED)
                            drawNode(this._nodeRenderers.getItemAt(i) as NodeRenderer);
                    }
                }
            }

            /**
             * Draws a Node Renderer in the Drawing Area
             **/
            private function drawNode(nodeRenderer:NodeRenderer):void
            {
                //Quickfix
                nodeRenderer.setStyle("backgroundAlpha", 0);

                //Announcing to Node containers that a new Node must be drawn
                var nodeRendererEvent:NodeRendererEvent = new NodeRendererEvent(NodeRendererEvent.NODERENDERER_ADDED,
                                                                                false);
                nodeRendererEvent.nodeRenderer = nodeRenderer;
                dispatchEvent(nodeRendererEvent);
            }

            /**
             * Captures whenever user has added a new NodeRenderer
             */
            private function onNodeRendererAdded(event:NodeRendererEvent):void
            {
                if (this._isDisplayingNodes)
                    drawNode(event.nodeRenderer as NodeRenderer);
            }


            /**
             * Captues whenever user wants to erase a NodeRenderer
             **/
            private function onNodeRendererErased(event:NodeRendererEvent):void
            {
                if (this._isDisplayingNodes)
                    eraseNodeRenderer(event.nodeRenderer as NodeRenderer);
            }


            /**
             * Erases the given Node from the DrawingArea, marking it as erased
             **/
            private function eraseNodeRenderer(nodeRenderer:NodeRenderer):void
            {
                //Announcing to the Node containers that a Node must be erased
                var nodeRendererEvent:NodeRendererEvent = new NodeRendererEvent(NodeRendererEvent.NODERENDERER_ERASED,
                                                                                false);
                nodeRendererEvent.nodeRenderer = nodeRenderer;
                dispatchEvent(nodeRendererEvent);

                //We have to delete the connection to and from the NodeRenderer that has been erased
                var xmlList:XMLList = this._nodeConnections.child("connection");
                var length:int = xmlList.length();
                var i:int;

                for (i = length - 1; i >= 0; i--)
                {
                    if (xmlList[i].@nodeFromID == nodeRenderer.node.id || xmlList[i].@nodeToID == nodeRenderer.node.id)
                    {
                        delete this._nodeConnections.connection[i];
                    }
                }
            }
        ]]>
    </mx:Script>
</mx:VBox>
